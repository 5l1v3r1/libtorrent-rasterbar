--- libtorrent-rasterbar-1.1.11/include/libtorrent/io_service_fwd.hpp.orig	2018-11-18 13:55:50.000000000 +0100
+++ libtorrent-rasterbar-1.1.11/include/libtorrent/io_service_fwd.hpp	2019-04-28 16:31:24.497229017 +0200
@@ -69,6 +69,15 @@
 #else
 	typedef boost::asio::io_service io_service;
 #endif
+
+#if BOOST_VERSION >= 107000
+template <typename T>
+io_service& get_io_service(T& o) { return static_cast<io_service&>(o.get_executor().context()); }
+#else
+template <typename T>
+io_service& get_io_service(T& o) { return o.get_io_service(); }
+#endif
+
 }
 
 #endif
--- libtorrent-rasterbar-1.2.0/include/libtorrent/io_service.hpp.orig	2019-04-28 21:20:37.963217224 +0200
+++ libtorrent-rasterbar-1.2.0/include/libtorrent/io_service.hpp	2019-04-28 22:13:25.612723260 +0200
@@ -41,13 +41,6 @@
 #include "libtorrent/aux_/disable_warnings_pop.hpp"
 #endif // SIMULATOR
 
-namespace libtorrent {
-
-#if defined TORRENT_BUILD_SIMULATOR
-	using io_service = sim::asio::io_service;
-#else
-	using io_service = boost::asio::io_service;
-#endif
-}
+#include "libtorrent/io_service_fwd.hpp"
 
 #endif
--- libtorrent-rasterbar-1.0.11/include/libtorrent/tracker_manager.hpp.orig	2017-02-04 19:16:33.000000000 +0100
+++ libtorrent-rasterbar-1.0.11/include/libtorrent/tracker_manager.hpp	2019-04-27 18:54:42.557868860 +0200
@@ -191,7 +191,7 @@
 		virtual void on_timeout(error_code const& ec) = 0;
 		virtual ~timeout_handler() {}
 
-		io_service& get_io_service() { return m_timeout.get_io_service(); }
+		io_service& get_io_service() { return libtorrent::get_io_service(m_timeout); }
 
 	private:
 	
--- libtorrent-rasterbar-1.1.11/include/libtorrent/proxy_base.hpp.orig	2017-02-04 19:16:33.000000000 +0100
+++ libtorrent-rasterbar-1.1.11/include/libtorrent/proxy_base.hpp	2019-04-27 21:18:33.689487409 +0200
@@ -250,7 +250,7 @@
 
 	io_service& get_io_service()
 	{
-		return m_sock.get_io_service();
+		return libtorrent::get_io_service(m_sock);
 	}
 
 	lowest_layer_type& lowest_layer()
--- libtorrent-rasterbar-1.2.0/include/libtorrent/udp_socket.hpp.orig	2019-04-28 22:13:51.845914476 +0200
+++ libtorrent-rasterbar-1.2.0/include/libtorrent/udp_socket.hpp	2019-04-28 22:15:48.195284157 +0200
@@ -61,7 +61,7 @@
 		static constexpr udp_send_flags_t dont_fragment = 3_bit;
 
 		bool is_open() const { return m_abort == false; }
-		io_service& get_io_service() { return m_socket.get_io_service(); }
+		io_service& get_io_service() { return libtorrent::get_io_service(m_socket); }
 
 		template <typename Handler>
 		void async_read(Handler&& h)
--- libtorrent-rasterbar-1.2.0/src/http_connection.cpp.orig	2019-04-28 22:16:06.475185127 +0200
+++ libtorrent-rasterbar-1.2.0/src/http_connection.cpp	2019-04-29 05:45:33.065761241 +0200
@@ -148,7 +148,7 @@
 
 	if (ec)
 	{
-		m_timer.get_io_service().post(std::bind(&http_connection::callback
+		libtorrent::get_io_service(m_timer).post(std::bind(&http_connection::callback
 			, me, ec, span<char>{}));
 		return;
 	}
@@ -160,7 +160,7 @@
 		)
 	{
 		error_code err(errors::unsupported_url_protocol);
-		m_timer.get_io_service().post(std::bind(&http_connection::callback
+		libtorrent::get_io_service(m_timer).post(std::bind(&http_connection::callback
 			, me, err, span<char>{}));
 		return;
 	}
@@ -258,7 +258,7 @@
 
 	if (ec)
 	{
-		m_timer.get_io_service().post(std::bind(&http_connection::callback
+		libtorrent::get_io_service(m_timer).post(std::bind(&http_connection::callback
 			, me, ec, span<char>{}));
 		return;
 	}
@@ -297,7 +297,7 @@
 #if TORRENT_USE_I2P
 			if (i2p_conn->proxy().type != settings_pack::i2p_proxy)
 			{
-				m_timer.get_io_service().post(std::bind(&http_connection::callback
+				libtorrent::get_io_service(m_timer).post(std::bind(&http_connection::callback
 					, me, error_code(errors::no_i2p_router), span<char>{}));
 				return;
 			}
@@ -332,7 +332,7 @@
 					m_ssl_ctx->set_verify_mode(ssl::context::verify_none, ec);
 					if (ec)
 					{
-						m_timer.get_io_service().post(std::bind(&http_connection::callback
+						libtorrent::get_io_service(m_timer).post(std::bind(&http_connection::callback
 								, me, ec, span<char>{}));
 						return;
 					}
@@ -344,7 +344,7 @@
 		// assume this is not a tracker connection. Tracker connections that
 		// shouldn't be subject to the proxy should pass in nullptr as the proxy
 		// pointer.
-		instantiate_connection(m_timer.get_io_service()
+		instantiate_connection(libtorrent::get_io_service(m_timer)
 			, proxy ? *proxy : null_proxy, m_sock, userdata, nullptr, false, false);
 
 		if (m_bind_addr)
@@ -353,7 +353,7 @@
 			m_sock.bind(tcp::endpoint(*m_bind_addr, 0), ec);
 			if (ec)
 			{
-				m_timer.get_io_service().post(std::bind(&http_connection::callback
+				libtorrent::get_io_service(m_timer).post(std::bind(&http_connection::callback
 					, me, ec, span<char>{}));
 				return;
 			}
@@ -362,7 +362,7 @@
 		setup_ssl_hostname(m_sock, hostname, ec);
 		if (ec)
 		{
-			m_timer.get_io_service().post(std::bind(&http_connection::callback
+			libtorrent::get_io_service(m_timer).post(std::bind(&http_connection::callback
 				, me, ec, span<char>{}));
 			return;
 		}
--- libtorrent-rasterbar-1.2.0/src/natpmp.cpp.orig	2019-04-29 05:46:02.395602348 +0200
+++ libtorrent-rasterbar-1.2.0/src/natpmp.cpp	2019-04-29 05:47:21.881838401 +0200
@@ -160,13 +160,13 @@
 	// try to find one even if the listen socket isn't bound to a device
 	if (device.empty())
 	{
-		device = device_for_address(local_address, m_socket.get_io_service(), ec);
+		device = device_for_address(local_address, libtorrent::get_io_service(m_socket), ec);
 		// if this fails fall back to using the first default gateway in the
 		// routing table
 		ec.clear();
 	}
 
-	auto const route = get_default_route(m_socket.get_io_service()
+	auto const route = get_default_route(libtorrent::get_io_service(m_socket)
 		, device, local_address.is_v6(), ec);
 
 	if (!route)
@@ -194,7 +194,7 @@
 	if (local_address.is_unspecified())
 	{
 		std::vector<ip_interface> const net = enum_net_interfaces(
-			m_socket.get_io_service(), ec);
+			libtorrent::get_io_service(m_socket), ec);
 
 		auto const it = std::find_if(net.begin(), net.end(), [&](ip_interface const& i)
 		{
--- libtorrent-rasterbar-1.2.0/src/lsd.cpp.orig	2019-04-29 05:46:02.395602348 +0200
+++ libtorrent-rasterbar-1.2.0/src/lsd.cpp	2019-04-29 05:48:04.508274140 +0200
@@ -100,11 +100,11 @@
 void lsd::start(error_code& ec)
 {
 	m_socket.open(std::bind(&lsd::on_announce, self(), _1, _2)
-		, m_broadcast_timer.get_io_service(), ec);
+		, libtorrent::get_io_service(m_broadcast_timer), ec);
 	if (ec) return;
 
 	m_socket6.open(std::bind(&lsd::on_announce, self(), _1, _2)
-		, m_broadcast_timer.get_io_service(), ec);
+		, libtorrent::get_io_service(m_broadcast_timer), ec);
 }
 
 lsd::~lsd() = default;
--- libtorrent-rasterbar-1.2.0/src/upnp.cpp.orig	2019-04-29 05:46:02.395602348 +0200
+++ libtorrent-rasterbar-1.2.0/src/upnp.cpp	2019-04-29 05:48:43.981393629 +0200
@@ -121,7 +121,7 @@
 
 	error_code ec;
 	m_socket.open(std::bind(&upnp::on_reply, self(), _1, _2)
-		, m_refresh_timer.get_io_service(), ec);
+		, libtorrent::get_io_service(m_refresh_timer), ec);
 
 	m_mappings.reserve(10);
 }
--- libtorrent-rasterbar-1.2.0/src/disk_io_thread_pool.cpp.orig	2019-01-12 16:01:06.000000000 +0100
+++ libtorrent-rasterbar-1.2.0/src/disk_io_thread_pool.cpp	2019-04-29 17:25:13.851665143 +0200
@@ -174,7 +174,7 @@
 			// buffer pool won't exist anymore, and crash. This prevents that.
 			m_threads.emplace_back(&pool_thread_interface::thread_fun
 				, &m_thread_iface, std::ref(*this)
-				, io_service::work(m_idle_timer.get_io_service()));
+				, io_service::work(libtorrent::get_io_service(m_idle_timer)));
 		}
 	}
 
--- libtorrent-rasterbar-1.2.0/src/udp_socket.cpp.orig	2019-01-12 16:01:06.000000000 +0100
+++ libtorrent-rasterbar-1.2.0/src/udp_socket.cpp	2019-04-29 18:22:44.892969248 +0200
@@ -492,7 +492,7 @@
 	{
 		// connect to socks5 server and open up the UDP tunnel
 
-		m_socks5_connection = std::make_shared<socks5>(m_socket.get_io_service());
+		m_socks5_connection = std::make_shared<socks5>(libtorrent::get_io_service(m_socket));
 		m_socks5_connection->start(ps);
 	}
 }
--- libtorrent-rasterbar-1.2.0/src/kademlia/dht_tracker.cpp.orig	2019-01-12 16:01:06.000000000 +0100
+++ libtorrent-rasterbar-1.2.0/src/kademlia/dht_tracker.cpp	2019-04-29 19:30:02.651094835 +0200
@@ -130,7 +130,7 @@
 		// must use piecewise construction because tracker_node::connection_timer
 		// is neither copyable nor movable
 		auto n = m_nodes.emplace(std::piecewise_construct_t(), std::forward_as_tuple(s)
-			, std::forward_as_tuple(m_key_refresh_timer.get_io_service()
+			, std::forward_as_tuple(libtorrent::get_io_service(m_key_refresh_timer)
 			, s, this, m_settings, nid, m_log, m_counters
 			, std::bind(&dht_tracker::get_node, this, _1, _2)
 			, m_storage));
